const crypto = require('crypto');
const nodemailer = require('nodemailer');

userSchema.methods.getResetPasswordToken=function(){
    const resetToken = crypto.randomBytes(20).toString('hex');
    this.resetPasswordToken = crypto.createHash('sha256').update(resetToken).digest('hex');
    this.resetTokenExpire = Date.now() + 15 * 60 * 1000;
    return resetToken;
}

//forgot password
exports.forgotPassword = async(req, res)=>{
    const user = await UserActivation.findOne({email:req.body.eamil});
    if(!user){
        res.status(500).json('user not found');
    }
    const resetoken = getResetPasswordToken();
    await user.save({validateBeforeSave:false});
    const resetPasswordUrl = `${req.protocol}://${req.get('host')}/api/v1/password/reset/${resetoken}`
    const message = `your password recovery token is :- \n\n ${resetPasswordUrl} \n\nif you are not request it
    then, please ignore this email`
    try {
        await sendEmail({
            email:user.email,
            subject:'ecommerce password recovery',
            message
        });
        res.status(200).json({
            success:true,
            message:`email send to ${user.email} successfully`
        })
    } catch (error) {
        user.resetPasswordToken = undefined;
        user.resetPasswordExpire = undefined;
        await user.save({validateBeforeSave:false});
        res.status(500).json(error);
    }
}

const sendEmail=async(options)=>{
    const transporter = nodemailer.createTransport({
        service:process.env.SMPT_SERVICE,
        auth:{
            user:process.env.SMPT_MAIL,
            pass:process.env.SMPT_PASSWORD
        }
    });
    const mailOptions = {
        from:process.env.SMPT_MAIL,
        to:options.email,
        subject:options.subject,
        text:options.message
    }
    await transporter.sendMail(mailOptions);
}